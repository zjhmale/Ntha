(type Prim String)
(type Binder Number)
(type Fresh Binder)
(type Context [(Binder . Type)])
(type Subrule [(Binder . Type)])

(data Expr
  (EVar Binder)
  (ELam Binder Expr)
  (EApp Expr Expr)
  (ELet Binder Expr Expr))

(data Type
  (TPrim Prim)
  (TVar Binder)
  (Type :~> Type)
  (TPoly [Binder] Type))

(ƒ apply
  [s t]
  (match t
    ((TVar b) → (lookup! t b s))
    ((t1 :~> t2) → ((apply s t1) :~> (apply s t2)))
    ((TPoly bs t') → (TPoly bs (apply (diff-map s bs) t')))
    (_ → t)))

(ƒ compose
  [s2 s1]
  (union-map (map-map (λ t → (apply s2 t)) s1) s2))

(ƒ free-vars
  [t]
  (match t
    ((TVar b) → [b])
    ((t1 :~> t2) → (nub (concat (free-vars t1) (free-vars t2))))
    ((TPoly bs t') → (diff-list (free-vars t') bs))
    (_ → [])))

(ƒ occurs-in?
  [b t]
  (exists? b (free-vars t)))

(ƒ unify
  [t1 t2]
  (match (t1 . t2)
    (((TPrim _) . (TPrim _)) → [])
    (((TVar b) . t) → (if (occurs-in? b t)
                        (error "infinite type found!")
                        [(b . t)]))
    ((t . (TVar b)) → (unify t2 t1))
    (((t1 :~> t2) . (t1' :~> t2')) → (compose (unify t1 t1')
                                              (unify t2 t2')))
    ((_ . _) → (error "unification failed!"))))

(ƒ make-fresh
  [fresh bs]
  (match bs
    ([] → ([] . fresh))
    (h :: t → (match (make-fresh (inc fresh) t)
                ((s . fresh') → (((h . (TVar fresh)) :: s) . fresh'))))))

(ƒ instantiate
  [fresh t]
  (match t
    ((TPoly bs t') → (let [(subrule . fresh') (make-fresh fresh bs)]
                       ((apply subrule t') . fresh')))
    (_ → (t . fresh))))

(ƒ generalize
  [ctx t]
  (let [frees (nub (diff-list (free-vars t) (map fst ctx)))]
    (TPoly frees t)))
