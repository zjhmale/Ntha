(type Prim String)
(type Binder Number)
(type Name String)
(type Fresh Binder)
(type Context [(Name . Type)])
(type Subrule [(Binder . Type)])

(data Expr
  (EVar Binder)
  (ELam Binder Expr)
  (EApp Expr Expr)
  (ELet Binder Expr Expr))

(data Type
  (TPrim Prim)
  (TVar Binder)
  (Type :~> Type)
  (TPoly [Binder] Type))

(let intT (TPrim "int"))
(let boolT (TPrim "bool"))

(ƒ subst
  [s t]
  (match t
    ((TVar b) → (lookup! t b s))
    ((t1 :~> t2) → ((subst s t1) :~> (subst s t2)))
    ((TPoly bs t') → (TPoly bs (subst (diff-map s bs) t')))
    (_ → t)))

(ƒ subst-ctx
  [s ctx]
  (map-map (subst s) ctx))

(ƒ compose
  [s2 s1]
  (union-map (map-map (subst s2) s1) s2))

(ƒ free-vars
  [t]
  (match t
    ((TVar b) → [b])
    ((t1 :~> t2) → (nub (concat (free-vars t1) (free-vars t2))))
    ((TPoly bs t') → (diff-list (free-vars t') bs))
    (_ → [])))

(ƒ occurs-in?
  [b t]
  (exists? b (free-vars t)))

(ƒ unify
  [t1 t2]
  (match (t1 . t2)
    (((TPrim _) . (TPrim _)) → [])
    (((TVar b) . t) → (if (occurs-in? b t)
                        (error "infinite type found!")
                        [(b . t)]))
    ((t . (TVar b)) → (unify t2 t1))
    (((t1 :~> t2) . (t1' :~> t2')) → (let [s1 (unify t1 t1')
                                           s2 (unify (subst s1 t2)
                                                     (subst s1 t2'))]
                                       (compose s2 s1)))
    ((_ . _) → (error "unification failed!"))))

(let tvarA 0)
(let tvarB 1)
(let tvarC 2)
(let tvarD 3)
(let tvarE 4)
(let tvarF 5)
(let tvarG 6)

(let mono1 ((TVar tvarA) :~> intT))
(let mono2 ((TVar tvarB) :~> (TVar tvarB)))
(let mono3 ((TVar tvarA) :~> (TVar tvarB)))
(let mono4 (((TVar tvarB) :~> (TVar tvarC)) :~> (TVar tvarC)))

(asserteq (unify mono1 mono2) [(tvarB . (TPrim "int")) (tvarA . (TPrim "int"))])
(asserteq (unify mono3 mono4) [(tvarB . (TVar tvarC)) (tvarA . ((TVar tvarC) :~> (TVar tvarC)))])

(ƒ make-fresh
  [fresh bs]
  (match bs
    ([] → ([] . fresh))
    (h :: t → (match (make-fresh (inc fresh) t)
                ((s . fresh') → (((h . (TVar fresh)) :: s) . fresh'))))))

(ƒ instantiate
  [fresh t]
  (match t
    ((TPoly bs t') → (let [(subrule . fresh') (make-fresh fresh bs)]
                       ((subst subrule t') . fresh')))
    (_ → (t . fresh))))

(ƒ generalize
  [ctx t]
  (let [frees (nub (diff-list (free-vars t) (map fst ctx)))]
    (TPoly frees t)))

(ƒ w'
  [fresh ctx expr]
  (match expr
    ((EVar b) → (match (lookup b ctx)
                  (Nothing → (error "ubound variable"))
                  ((Just t) → (let [(t' . fresh') (instantiate fresh t)]
                                (([] . t') . fresh')))))
    ((EApp fn arg) → (match (w' (inc fresh) ctx fn)
                       (((s1 . t1) . fresh1) →
                         (match (w' fresh1 (subst-ctx s1 ctx) arg)
                           (((s2 . t2) . fresh2) →
                             (let [b (TVar fresh)
                                   s3 (unify (subst s2 t1) (t2 :~> b))]
                               (((compose s3 (compose s2 s1)) . (subst s3 b)) . fresh2)))))))
    ((ELam name body) → (let [b (TVar fresh)]
                          (match (w' (inc fresh) (union-map [(name . b)] ctx) body)
                            (((s . t) . fresh') → ((s . ((subst s b) :~> t)) . fresh')))))
    ((ELet name def body) → (match (w' fresh ctx def)
                              (((s1 . t1) . fresh1) →
                                (let [ctx' (subst-ctx s1 ctx)
                                      g (generalize ctx' t1)
                                      ctx'' (union-map [(name . g)] ctx')]
                                  (match (w' fresh1 ctx'' body)
                                    (((s2 . t2) . fresh2) → (((compose s2 s1) . t2) . fresh2)))))))))

(ƒ w
  [assumps expr]
  (match (w' 0 assumps expr)
    (((_ . t) . _) → (generalize [] t))))

(let assumptions [(0 . intT) ;;
                  (1 . intT) ;; one
                  (2 . boolT) ;; true
                  (3 . boolT) ;; false
                  (4 . (boolT :~> boolT)) ;; not
                  (5 . (intT :~> (intT :~> intT))) ;; add
                  (6 . (TPoly [tvarA] ((TVar tvarA) :~> (TVar tvarA)))) ;; id
                  (7 . (TPoly [tvarA] ((TVar tvarA) :~> ((TVar tvarA) :~> boolT)))) ;; eq
                  (8 . (TPoly [tvarA tvarB tvarC] (((TVar tvarB) :~> (TVar tvarC)) :~> (((TVar tvarA) :~> (TVar tvarB)) :~> ((TVar tvarA) :~> (TVar tvarC)))))) ;; compose
                  (9 . (TPoly [tvarA] ((TVar tvarA) :~> ((TVar tvarA) :~> (TVar tvarA))))) ;; choose
                 ])

(ƒ infer
  [expr]
  (w assumptions expr))

(asserteq (infer (EVar 6)) (TPoly [tvarA] ((TVar tvarA) :~> (TVar tvarA))))
(asserteq (infer (EApp (EVar 6) (EApp (EVar 6) (EVar 1)))) (TPoly [] intT))
(asserteq (infer (EApp (EApp (EVar 7) (EVar 3)) (EVar 2))) (TPoly [] boolT))
(asserteq (infer (EApp (EVar 8) (EVar 4))) (TPoly [tvarB] (((TVar tvarB) :~> boolT) :~> ((TVar tvarB) :~> boolT))))
(asserteq (infer (EApp (EApp (EVar 8) (EVar 4)) (EApp (EVar 7) (EVar 1)))) (TPoly [] (intT :~> boolT)))
(asserteq (infer (EApp (EVar 8) (EApp (EVar 5) (EVar 1)))) (TPoly [tvarB] (((TVar tvarB) :~> intT) :~> ((TVar tvarB) :~> intT))))
(asserteq (infer (EApp (EApp (EApp (EVar 8) (EVar 7)) (EVar 5)) (EVar 1))) (TPoly [] ((intT :~> intT) :~> boolT)))

(let evarX 100)
(let evarY 200)
(let evarA 300)
(let evarB 400)
(let evarC 500)

(asserteq (infer (ELam evarA
                       (ELam evarB
                       (ELet evarA
                             (EApp (EVar evarA)
                                   (EVar evarB))
                             (ELam evarA
                                   (EApp (EVar evarB)
                                         (EVar evarA)))))))
          (TPoly [tvarC tvarD tvarE] ((((TVar tvarD) :~> (TVar tvarE)) :~> (TVar tvarC)) :~> (((TVar tvarD) :~> (TVar tvarE)) :~> ((TVar tvarD) :~> (TVar tvarE))))))

(asserteq (infer (ELam evarA
                       (ELet evarX
                           (ELam evarB
                                 (ELet evarY
                                       (ELam evarC (EApp (EVar evarA) (EVar 0)))
                                       (EApp (EVar evarY) (EVar 1))))
                           (EApp (EVar evarX) (EVar 1)))))
          (TPoly [tvarF] ((intT :~> (TVar tvarF)) :~> (TVar tvarF))))

(asserteq (infer (EApp (EApp (EVar 9)
                       (ELam evarA
                             (ELam evarB
                                   (EVar evarA))))
                 (ELam evarA
                       (ELam evarB
                             (EVar evarB)))))
          (TPoly [tvarG] ((TVar tvarG) :~> ((TVar tvarG) :~> (TVar tvarG)))))

(asserteq (infer (EApp (EVar 8) (EVar 8)))
          (TPoly [tvarB tvarF tvarE tvarG] (((TVar tvarB) :~> ((TVar tvarF) :~> (TVar tvarG))) :~> ((TVar tvarB) :~> (((TVar tvarE) :~> (TVar tvarF)) :~> ((TVar tvarE) :~> (TVar tvarG)))))))
