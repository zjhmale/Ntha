;; example1

(data Ast
  (Num Number)
  (Add Ast Ast)
  (Sub Ast Ast)
  (Mul Ast Ast)
  (Div Ast Ast))

(ƒ eval [n]
  (match n
    ((Num a) ⇒ a)
    ((Add a b) ⇒ (+ (eval a) (eval b)))
    ((Sub a b) ⇒ (- (eval a) (eval b)))
    ((Mul a b) ⇒ (* (eval a) (eval b)))
    ((Div a b) ⇒ (/ (eval a) (eval b)))))

(let sym (Mul (Add (Num 4) (Num 3)) (Sub (Num 4) (Num 1))))

(let result (eval sym))

;; example2

(data Oper Add Sub)
(data Expr
  (Num Number)
  (App Oper Expr Expr))

(let a (App Add (Num 5) (Num 6)))

(ƒ eval [e]
  (match e
    ((Num n) ⇒ n)
    ((App o e1 e2) ⇒
      (match o
        (Add ⇒ (+ (eval e1) (eval e2)))
        (Sub ⇒ (- (eval e1) (eval e2)))))))

(let av (eval a))

(ƒ eval [e]
  (match e
    ((Num n) ⇒ n)
    ((App Add e1 e2) ⇒ (+ (eval e1) (eval e2)))
    ((App Sub e1 e2) ⇒ (- (eval e1) (eval e2)))))

(let av (eval a))

(ƒ simplify [e]
  (match e
    ((App Add (Num n) e2) ⇒ (if (= n 0) e2 e))))

(let a (App Add (Num 0) (Num 6)))
(let b (simplify a))

;; example3

(type Name String)
(type Env [(Name . Expr)])

(data Op Add Sub Mul Div Less Iff)

(data Expr
  (Num Number)
  (Bool Boolean)
  (Var Name)
  (If Expr Expr Expr)
  (Let [Char] Expr Expr)
  (LetRec Name Expr Expr)
  (Lambda Name Expr)
  (Closure Expr Env)
  (App Expr Expr)
  (Binop Op (Expr . Expr)))

(let op-map {:add +
             :sub -
             :mul *
             :div /
             :less <
             :iff =})

(ƒ arith-eval [fn (v1 . v2)]
  (Just (Num (fn v1 v2))))

(ƒ logic-eval [fn (v1 . v2)]
  (Just (Bool (fn v1 v2))))

(let eval-op
  (λ op v1 v2 ⇒
    (match (v1 . v2)
      (((Just (Num v1)) . (Just (Num v2))) ⇒
        (match op
          (Add ⇒ (arith-eval (:add op-map) (v1 . v2)))
          (Sub ⇒ (arith-eval (:sub op-map) (v1 . v2)))
          (Mul ⇒ (arith-eval (:mul op-map) (v1 . v2)))
          (Div ⇒ (arith-eval (:div op-map) (v1 . v2)))
          (Less ⇒ (logic-eval (:less op-map) (v1 . v2)))
          (Iff ⇒ (logic-eval (:iff op-map) (v1 . v2)))))
      (_ ⇒ Nothing))))

;; <fun> : [([Char] * Expr)] → (Expr → (Maybe Expr))
(ƒ eval [env expr]
  (match expr
    ((Num _) ⇒ (Just expr))
    ((Bool _) → (Just expr))
    ((Var x) ⇒ (do Maybe
                 (val ← (lookup x env))
                 (return val)))
    ((If cond then else) → (match (eval env cond)
                             ((Just (Bool true)) → (eval env then))
                             ((Just (Bool false)) → (eval env else))
                             (_ → (error "condition should be evaluated to a boolean value"))))
    ((Lambda _ _) → (Just (Closure expr env)))
    ((App fn arg) → (let [fnv (eval env fn)
                          argv (eval env arg)]
                      (match fnv
                        ((Just (Closure (Lambda x e) innerenv)) →
                            (do Maybe
                              (argv ← (eval env arg))
                              (eval ((x . argv) :: innerenv) e)))
                        (_ → (error "should apply arg to a function")))))
    ((Let x e1 in-e2) ⇒ (do Maybe
                          (v ← (eval env e1))
                          (eval ((x . v) :: env) in-e2)))
    ((LetRec x e1 in-e2) → (do Maybe
                             (fn <- (eval env (Let "Y" (Lambda "h" (App (Lambda "f" (App (Var "f") (Var "f"))) (Lambda "f" (App (Var "h") (Lambda "n" (App (App (Var "f") (Var "f")) (Var "n")))))))
                                                                                    (App (Var "Y") (Lambda "fact" e1)))))
                             (eval (("fact" . fn) :: env) in-e2)))
    ;;((LetRec x e1 in-e2) → (eval env (Let "Y" (Lambda "h" (App (Lambda "f" (App (Var "f") (Var "f"))) (Lambda "f" (App (Var "h") (Lambda "n" (App (App (Var "f") (Var "f")) (Var "n")))))))
    ;;                                          (Let x (App (Var "Y") (Lambda x e1))
    ;;                                                 in-e2))))
    ((Binop op (e1 . e2)) => (let [v1 (eval env e1)
                                   v2 (eval env e2)]
                               (eval-op op v1 v2)))))

(match (eval [] (Let "x" (Num 2) (Let "f" (Lambda "y" (Binop Mul ((Var "x") . (Var "y")))) (App (Var "f") (Num 3)))))
  ((Just (Num num)) ⇒ (print (int2str num)))
  (Nothing ⇒ (error "oops")))

(eval [] (Binop Add ((Num 1) . (Num 2))))
(eval [] (Binop Mul ((Num 2) . (Num 3))))
(eval [] (Binop Mul ((Num 2) . (Binop Add ((Num 3) . (Num 4))))))
(eval [] (Binop Mul ((Binop Add ((Num 1) . (Num 2))) . (Binop Add ((Num 3) . (Num 4))))))
(eval [] (App (Lambda "x" (Binop Mul ((Num 2) . (Var "x")))) (Num 3)))
(eval [] (Let "x" (Num 1) (Binop Add ((Var "x") . (Var "x")))))
(eval [] (Let "x" (Num 2) (Let "f" (Lambda "y" (Binop Mul ((Var "x") . (Var "y")))) (App (Var "f") (Num 3)))))
(eval [] (Let "x" (Num 2) (Let "f" (Lambda "y" (Binop Mul ((Var "x") . (Var "y")))) (Let "x" (Num 4) (App (Var "f") (Num 3))))))
(eval [] (If (Binop Less ((Num 3) . (Num 6))) (Num 3) (Num 6)))

(eval [] (Let "Y" (Lambda "h" (App (Lambda "f" (App (Var "f") (Var "f"))) (Lambda "f" (App (Var "h") (Lambda "n" (App (App (Var "f") (Var "f")) (Var "n")))))))
                  (Let "fact" (App (Var "Y") (Lambda "g" (Lambda "n" (If (Binop Less ((Var "n") . (Num 2))) (Num 1) (Binop Mul ((Var "n") . (App (Var "g") (Binop Sub ((Var "n") . (Num 1))))))))))
                              (App (Var "fact") (Num 5)))))

(match (eval [] (Let "Y" (Lambda "h" (App (Lambda "f" (App (Var "f") (Var "f"))) (Lambda "f" (App (Var "h") (Lambda "n" (App (App (Var "f") (Var "f")) (Var "n")))))))
                         (Let "fact" (App (Var "Y") (Lambda "fact" (Lambda "n" (If (Binop Less ((Var "n") . (Num 2))) (Num 1) (Binop Mul ((Var "n") . (App (Var "fact") (Binop Sub ((Var "n") . (Num 1))))))))))
                                   (App (Var "fact") (Num 5)))))
  ((Just (Num num)) ⇒ (print (int2str num)))
  (Nothing ⇒ (error "oops")))

(begin
  (print "start")
  (let result (match (eval [] (LetRec "fact" (Lambda "n" (If (Binop Less ((Var "n") . (Num 2))) (Num 1) (Binop Mul ((Var "n") . (App (Var "fact") (Binop Sub ((Var "n") . (Num 1)))))))) (App (Var "fact") (Num 5))))
                ((Just (Num num)) ⇒ (int2str num))
                (Nothing ⇒ (error "oops"))))
  (print result)
  (print "finish"))
